A series of folders, using mylib as basic toolkit, where various
operators G are defined and the bayesian inverse algorithm is tested.


----    COMPLETE HIERARCHY DESCRIPTION  ----

mylib:  (folder)        basic toolkit

fNAME:  (many folders)  temporary files for developing a new
                        *f*unction named NAME that will be added
                        to the library. Examples:
                        fMultidimensionalGaussian
                        fPoissonProcess;

pNAME:  (many folders)  _complete_ *p*rojects of application
                        of the Bayesian Inverse Theory.

dNAME:  (many folders)  projects of application of the Bayesian Inverse Theory,
                        in *d*evelopment or further testing.

tests:  (folder)        tests for checking a specific library funcionality


REMARKS:
        Every f folder contains source code that can be
        independent of the main library, since it is supposed to
        be a new funcionality to add (usually, it uses Linear Algebra Lib).

        Every p folder refers to a project showing the usage of
        Bayesian principles, for example "pConvectionODE"
        deals with inverting the convection ODE.

        Every p folder must be completely independent of any other p folder,
        as well as of all others f folders.

        Every p folder **must** only depend on mylib, and contains:
        - README.txt    that explains the purpose of the project;
        - main.c        the main C source file ready to be compiled by a...
        - makefile      written once and valid for every project.

        [A project's makefile is very trivial: it searches for the
        [already-compiled mylib libraries, then compile main.c
        [linking it to these libraries (located in subfolders of mylib)]

        - other .c or .h files are admitted, as well as modifications
          to the makefile, the only requirement is to be well-documented.

Gold rule: **compiling a project MUST leave untouched the content of mylib**

Speaking about mylib, it contains three subfolders and a compile.sh script.
        - src:          where all the .c files are stored
        - include:      where all the .h headers are stored
        - obj:          where the compiled .o objects are stored
        - compile.sh    compile all src/*.c, move them to obj/

Every file.c in src has a file.h counterpart in include,
and they follow dependencies documented file-by-file.
Now they are ready to be used for f or p folders!
A project's makefile will expect obj/ to be ready,
without re-compiling or modifying anything.

d folders follow the same precise rules of p folders.

Summing up, here a pictorially organization:

|       README.txt
|       mylib           /compile.sh
                        /src/*.c
                        /include/*.h
                        /obj/*.o    

|       pNAME or dNAME  /main.c
                        /makefile
                        /*.c
                        /*.h
                        /README.txt
|       fNAME           / /* code that not necessarely must follow a rule */
|       tests           /various_tests.c

